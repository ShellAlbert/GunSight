zhangshaoyan@linux-idpd:~/NoiseReduction/rnnoise-91ef401/src> cat rnn_data.h
/*This file is automatically generated from a Keras model*/

#ifndef RNN_DATA_H
#define RNN_DATA_H

#include "rnn.h"

#define INPUT_DENSE_SIZE 24
extern const DenseLayer input_dense;
//这个导出可以搜索到只在rnn.c中使用了
//src/rnn.c:  compute_dense(&input_dense, dense_out, input);
//下面这个应该是由python脚本生成的rnn_data.h/.c，不用理会。
//training/rnn_train.py:tmp = Dense(24, activation='tanh', name='input_dense', kernel_constraint=constraint, bias_constraint=constraint)(main_input)


#define VAD_GRU_SIZE 24
extern const GRULayer vad_gru;
//src/rnn.c:  compute_gru(&vad_gru, rnn->vad_gru_state, dense_out);



#define NOISE_GRU_SIZE 48
extern const GRULayer noise_gru;
//src/rnn.c:  compute_gru(&noise_gru, rnn->noise_gru_state, noise_input);
//compute_gru(&denoise_gru, rnn->denoise_gru_state, denoise_input);


#define DENOISE_GRU_SIZE 96
extern const GRULayer denoise_gru;
//src/rnn.c:  compute_gru(&denoise_gru, rnn->denoise_gru_state, denoise_input);


#define DENOISE_OUTPUT_SIZE 22
extern const DenseLayer denoise_output;
//src/rnn.c:  compute_dense(&denoise_output, gains, rnn->denoise_gru_state);


#define VAD_OUTPUT_SIZE 1
extern const DenseLayer vad_output;
//src/rnn.c:  compute_dense(&vad_output, vad, rnn->vad_gru_state);


struct RNNState {
  float vad_gru_state[VAD_GRU_SIZE];
  float noise_gru_state[NOISE_GRU_SIZE];
  float denoise_gru_state[DENOISE_GRU_SIZE];
};


#endif
zhangshaoyan@linux-idpd:~/NoiseReduction/rnnoise-91ef401/src> 


//这有这2个地方调用了compute_rnn这个函数
src/denoise.c:    compute_rnn(&st->rnn, g, &vad_prob, features);
src/denoise.c:    compute_rnn(&noisy->rnn, g, &vad_prob, features);
