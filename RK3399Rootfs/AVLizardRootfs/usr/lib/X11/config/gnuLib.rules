/*
 * GNU/Hurd shared library rules
 *
 * $XFree86: xc/config/cf/gnuLib.rules,v 1.9 2003/10/11 09:40:13 herrb Exp $
 */

/*
 * GNU/Hurd shared library rules
 * Cloned from Linux (ELF) shared library rules
 *
 */

#ifndef HasSharedLibraries
#define HasSharedLibraries YES
#endif
#ifndef ForceNormalLib
#define ForceNormalLib NO
#endif

#ifndef UseRpath
#define UseRpath NO
#endif

#ifndef SharedOldX
#define SharedOldX NO
#endif

#ifndef SpecialMalloc
#define SpecialMalloc NO
#endif

# ifndef BaseShLibReqs
#define BaseShLibReqs   -lc
# endif

#ifndef SharedDataSeparation
#define SharedDataSeparation NO
#endif
#ifndef SharedCodeDef
#define SharedCodeDef /**/
#endif
#ifndef SharedLibraryDef
#define SharedLibraryDef /**/
#endif
#ifndef ShLibIncludeFile
#define ShLibIncludeFile <gnuLib.tmpl>
#endif
#ifndef RpathLoadFlags
#if UseRpath
#define RpathLoadFlags -Wl,-rpath,$(USRLIBDIRPATH)
#else
#define RpathLoadFlags /**/
#endif
#endif
#ifndef LibraryRpathLoadFlags
#define LibraryRpathLoadFlags RpathLoadFlags
#endif
#ifndef SharedLibraryLoadFlags
#  define SharedLibraryLoadFlags -shared
#endif
#ifndef PositionIndependentCFlags
#define PositionIndependentCFlags -fPIC
#endif
#ifndef PositionIndependentCplusplusFlags
#define PositionIndependentCplusplusFlags -fPIC
#endif
#ifndef ExtraLoadFlags
#  define ExtraLoadFlags RpathLoadFlags
# endif
# ifndef HardCodeLibdirFlag
#  define HardCodeLibdirFlag RpathLoadFlags
#endif
# if !defined(ShlibGlobalsFlags)
#  define ShlibGlobalsFlags -Wl,-Bsymbolic
#endif

/*
 * InstallSharedLibrary - generate rules to install the shared library.
 * NOTE: file must be executable, hence "INSTBINFLAGS"
 */
#ifndef InstallSharedLibrary
#define InstallSharedLibrary(libname,rev,dest)				@@\
install:: Concat(lib,libname.so.rev) 					@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTBINFLAGS) Concat(lib,libname.so.rev) $(DESTDIR)dest @@\
	@T=`echo Concat($(DESTDIR)dest/lib,libname.so.rev) | sed 's/\(lib[^\.]*\.so\.[0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`;\
	  set -x; $(RM) $$T && $(LN) Concat(lib,libname.so.rev) $$T	@@\
	@if $(SOSYMLINK); then (set -x; \
	  $(RM) Concat($(DESTDIR)dest/lib,libname.so); \		@@\
	  $(LN) Concat(lib,libname.so.rev) Concat($(DESTDIR)dest/lib,libname.so)); fi
#endif /* InstallSharedLibrary */

# ifndef InstallSharedLibtoolLibrary

#  define SetRevisions(rev) V=`expr rev : '\([^:]*\)'`; \		@@\
		R=`expr rev : '.*:\([^:]*\):'`; \			@@\
		A=`expr rev : '.*:\([^:]*\)'`; \			@@\
		MAJ=`expr $$V - $$A`; \					@@\
		MIN=$$A.$$R

#  define	InstallSharedLibtoolLibrary(libname,rev,dest)		@@\
install:: Concat(lib,libname.so) 					@@\
	MakeDir($(DESTDIR)dest)						@@\
	@set +e; SetRevisions(rev); \					@@\
		set -xe; \						@@\
		$(INSTALL) $(INSTALLFLAGS) $(INSTBINFLAGS) Concat(lib,libname.so.$$MAJ.$$MIN) $(DESTDIR)dest; \ @@\
		$(RM) Concat($(DESTDIR)dest/lib,libname.so.$$MAJ); \	@@\
		$(LN) Concat(lib,libname.so.$$MAJ.$$MIN) Concat($(DESTDIR)dest/lib,libname.so.$$MAJ); \ @@\
		$(RM) Concat($(DESTDIR)dest/lib,libname.so); \		@@\
		$(LN) Concat(lib,libname.so.$$MAJ.$$MIN) Concat($(DESTDIR)dest/lib,libname.so)
# endif /* InstallSharedLibrary */

/*
 * InstallSharedLibraryData - generate rules to install the shared library data
 */
#ifndef InstallSharedLibraryData
#define InstallSharedLibraryData(libname,rev,dest)
#endif /* InstallSharedLibraryData */


/*
 * SharedLibraryTarget - generate rules to create a shared library;
 * build it into a different name so that we do not hose people by having
 * the library gone for long periods.
 */
#ifndef SharedLibraryTarget
#define SharedLibraryTarget(libname,rev,solist,down,up)			@@\
AllTarget(Concat(lib,libname.so.rev))					@@\
									@@\
Concat(lib,libname.so.rev):  solist $(EXTRALIBRARYDEPS)			@@\
	$(RM) $@~							@@\
	@SONAME=`echo $@ | sed 's/\(lib[^\.]*\.so\.[0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; (set -x; \	@@\
		cd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs) || exit 1; \ @@\
		(set -x; $(RM) $$SONAME; $(LN) $@ $$SONAME); \		@@\
		LinkBuildSonameLibrary($$SONAME)			@@\
	$(RM) $@							@@\
	$(MV) $@~ $@							@@\
	@if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat(lib,libname.so); \				@@\
	  $(LN) $@ Concat(lib,libname.so)); fi				@@\
	LinkBuildLibrary($@)						@@\
	LinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))	@@\
									@@\
clean::									@@\
	@MAJREV=`echo rev | sed 's/\([0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; \	@@\
	set -x; $(RM) Concat(lib,libname.so.$$MAJREV)			@@\
	$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)

#endif /* SharedLibraryTarget */


# ifndef SharedLibtoolLibraryTarget
#  define SharedLibtoolLibraryTarget(libname,rev,solist,down,up)	@@\
AllTarget(Concat(lib,libname.so))					@@\
									@@\
Concat(lib,libname.so):  solist $(EXTRALIBRARYDEPS)			@@\
	$(RM) $@~							@@\
	@set +e; SetRevisions(rev); set -e; \				@@\
		SONAME=$@.$$MAJ; \					@@\
		(set -x; \						@@\
		$(RM) $@.$$MAJ.$$MIN~; \				@@\
		cd down; $(CC) -o up/$@.$$MAJ.$$MIN~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs) || exit 1; \ @@\
		(set -x; \						@@\
		$(RM) $$SONAME; $(LN) $@.$$MAJ.$$MIN $$SONAME); \	@@\
		LinkBuildSonameLibrary($$SONAME); \			@@\
		(set -x; \						@@\
		$(RM) $@.$$MAJ.$$MIN; \					@@\
		$(MV) $@.$$MAJ.$$MIN~ $@.$$MAJ.$$MIN; \			@@\
	  	$(RM) $@; \						@@\
	  	$(LN) $@.$$MAJ.$$MIN $@); \				@@\
		LinkBuildLibraryInline($@.$$MAJ.$$MIN); \		@@\
		LinkBuildLibraryInline($@)				@@\
									@@\
clean::									@@\
	@set +e; SetRevisions(rev); \					@@\
		set -xe; \						@@\
		$(RM) Concat(lib,libname.so.$$MAJ); \			@@\
		$(RM) Concat(lib,libname.so.$$MAJ.$$MIN)		@@\
	$(RM) Concat(lib,libname.so)

# endif /* SharedLibtoolLibraryTarget */

/*
 * SharedDepLibraryTarget - generate rules to create a shared library.
 */
#ifndef SharedDepLibraryTarget
#define SharedDepLibraryTarget(libname,rev,deplist,solist,down,up)	@@\
AllTarget(Concat(lib,libname.so.rev))					@@\
									@@\
Concat(lib,libname.so.rev):  deplist $(EXTRALIBRARYDEPS)		@@\
	$(RM) $@~							@@\
	@SONAME=`echo $@ | sed 's/\(lib[^\.]*\.so\.[0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; set -x; \		@@\
		(cd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \ @@\
		$(RM) $$SONAME; $(LN) $@ $$SONAME; \			@@\
		LinkBuildSonameLibrary($$SONAME)			@@\
	$(RM) $@ 							@@\
	$(MV) $@~ $@							@@\
	@if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat(lib,libname.so); \				@@\
	  $(LN) $@ Concat(lib,libname.so)); fi				@@\
	LinkBuildLibrary($@)						@@\
	LinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))	@@\
									@@\
clean::									@@\
	@MAJREV=`echo rev | sed 's/\([0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; \	@@\
	set -x; $(RM) Concat(lib,libname.so.$$MAJREV)			@@\
	$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)

#endif /* SharedDepLibraryTarget */

/*
 * SharedDepCplusplusLibraryTarget - generate rules to create a shared library.
 */
#ifndef SharedDepCplusplusLibraryTarget
#define SharedDepCplusplusLibraryTarget(libname,rev,deplist,solist,down,up) @@\
AllTarget(Concat(lib,libname.so.rev))					@@\
									@@\
Concat(lib,libname.so.rev):  deplist $(EXTRALIBRARYDEPS)		@@\
	$(RM) $@~							@@\
	@SONAME=`echo $@ | sed 's/\(lib[^\.]*\.so\.[0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; set -x; \		@@\
		(cd down; $(CXX) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \ @@\
		$(RM) $$SONAME; $(LN) $@ $$SONAME; \			@@\
		LinkBuildSonameLibrary($$SONAME)			@@\
	$(RM) $@ 							@@\
	$(MV) $@~ $@							@@\
	@if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat(lib,libname.so); \				@@\
	  $(LN) $@ Concat(lib,libname.so)); fi				@@\
	LinkBuildLibrary($@)						@@\
	LinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))	@@\
									@@\
clean::									@@\
	@MAJREV=`echo rev | sed 's/\([0-9]*\)\(\.[0-9]*\)\{1,2\}/\1/'`; \	@@\
	set -x; $(RM) Concat(lib,libname.so.$$MAJREV)			@@\
	$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)

#endif /* SharedDepCplusplusLibraryTarget */

#ifndef SharedDepModuleTarget
#define SharedDepModuleTarget(name,deps,solist)				@@\
AllTarget(name)								@@\
									@@\
name: deps								@@\
	$(RM) $@~							@@\
	$(CC) -o $@~ $(SHLIBLDFLAGS) solist $(REQUIREDLIBS) BaseShLibReqs @@\
	$(RM) $@							@@\
	$(MV) $@~ $@							@@\
									@@\
clean::									@@\
	$(RM) name

#endif /* SharedDepModuleTarget */

# ifndef SharedDriModuleTarget
#  define SharedDriModuleTarget(name,deps,solist)			@@\
AllTarget(name)								@@\
									@@\
name: deps								@@\
	$(RM) $@~ $@.map						@@\
	@(echo 'DRI_MODULE { global: __dri*; local: *; };' > $@.map)	@@\
	$(CC) -o $@~ -Wl,--version-script=$@.map $(SHLIBLDFLAGS) solist $(REQUIREDLIBS) BaseShLibReqs @@\
	$(RM) $@ $@.map							@@\
	$(MV) $@~ $@							@@\
									@@\
clean::									@@\
	$(RM) name							@@\
	$(RM) name.map

# endif /* SharedDriModuleTarget */

/*
 * SharedLibraryDataTarget - generate rules to create shlib data file;
 */
#ifndef SharedLibraryDataTarget
#define SharedLibraryDataTarget(libname,rev,salist)
#endif /* SharedLibraryTarget */
